#!/usr/bin/env python

import json
import os


class MalwareHash(object):
    def __init__(self, hash_func, json_files=None):
        self.hash_func = hash_func
        self.computed_hashes = {}

        if json_files is None:
            dir_name = os.path.dirname(os.path.abspath(__file__))
            json_files = [os.path.join(dir_name, file) for file in os.listdir(dir_name) if file.endswith('.json')]

        for json_file in json_files:
            self.load_hash_sources(json_file)

    def load_hash_sources(self, filename):
        with open(filename, 'r') as f:
            hash_sources = json.load(f)
            for category in hash_sources:
                for input_string in hash_sources[category]:
                    input_strings_mutated = list()
                    input_strings_mutated.append(input_string)
                    if 'folder' in category:
                        if not input_string.startswith('\\'):
                            input_strings_mutated.append('\\' + input_string)
                        if not input_string.endswith('\\'):
                            input_strings_mutated.append(input_string + '\\')
                        if not input_string.startswith('\\') and not input_string.endswith('\\'):
                            input_strings_mutated.append('\\' + input_string + '\\')
                    for string_to_hash in input_strings_mutated:
                        computed_hash = self.hash_func(string_to_hash)
                        hash_set = self.computed_hashes.get(computed_hash)
                        if not hash_set:
                            hash_set = set()
                            self.computed_hashes[computed_hash] = hash_set
                        hash_set.add(string_to_hash)

    def get_strings_by_hash(self, computed_hash):
        return list(self.computed_hashes.get(computed_hash, set()))
